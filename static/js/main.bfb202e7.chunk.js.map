{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","defaultSortState","field","isReverse","App","useState","sortRules","setSortRules","goods","goodsArr","goodsCopy","sort","g1","g2","Alphabetic","localeCompare","Length","length","reverse","prepareGoods","showRevers","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAKKA,E,oFAAAA,K,iBAAAA,E,iBAAAA,M,KAsCE,IAAMC,EAA0B,CACrC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAA8B,CAClCC,MAAO,KACPC,WAAW,GAGAC,EAAgB,WAC3B,MAAkCC,mBAAoBJ,GAAtD,mBAAOK,EAAP,KAAkBC,EAAlB,KAEMC,EA/CR,SAAsBC,EAAkBH,GACtC,IAAMI,EAAiB,YAAOD,GAsB9B,OApBIH,EAAUJ,OACZQ,EAAUC,MACR,SAACC,EAAIC,GACH,OAAIP,EAAUJ,QAAUH,EAASe,WACxBF,EAAGG,cAAcF,GAGtBP,EAAUJ,QAAUH,EAASiB,OACxBJ,EAAGK,OAASJ,EAAGI,OAGjB,KAKTX,EAAUH,WACZO,EAAUQ,UAGLR,EAwBeS,CAAanB,EAAiBM,GAC9Cc,EAAad,EAAUJ,OAASI,EAAUH,UAEhD,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAAYjB,EAAUJ,QAAUH,EAASe,aAE3CU,QAAS,kBAAMjB,EAAa,CAC1BL,MAAOH,EAASe,WAChBX,UAAWG,EAAUH,aAPzB,iCAaA,wBACEmB,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAAYjB,EAAUJ,QAAUH,EAASiB,SAE3CQ,QAAS,kBAAMjB,EAAa,CAC1BL,MAAOH,EAASiB,OAChBb,UAAWG,EAAUH,aAPzB,4BAaA,wBACEmB,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,YAAajB,EAAUH,YAEzBqB,QAAS,kBAAMjB,EAAa,CAC1BL,MAAOI,EAAUJ,MACjBC,WAAYG,EAAUH,aAP1B,qBAaCiB,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAMjB,EAAaN,IAH9B,sBAUJ,6BACE,6BACGO,EAAMiB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cCxHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bfb202e7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nenum SortType {\n  Alphabetic = 'abc',\n  Length = 'length',\n}\n\ninterface SortRules {\n  field: SortType | null;\n  isReverse: boolean;\n}\n\ntype Good = string;\n\nfunction prepareGoods(goodsArr: Good[], sortRules: SortRules): Good[] {\n  const goodsCopy: Good[] = [...goodsArr];\n\n  if (sortRules.field) {\n    goodsCopy.sort(\n      (g1, g2) => {\n        if (sortRules.field === SortType.Alphabetic) {\n          return g1.localeCompare(g2);\n        }\n\n        if (sortRules.field === SortType.Length) {\n          return g1.length - g2.length;\n        }\n\n        return 0;\n      },\n    );\n  }\n\n  if (sortRules.isReverse) {\n    goodsCopy.reverse();\n  }\n\n  return goodsCopy;\n}\n\nexport const goodsFromServer: Good[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst defaultSortState: SortRules = {\n  field: null,\n  isReverse: false,\n};\n\nexport const App: React.FC = () => {\n  const [sortRules, setSortRules] = useState<SortRules>(defaultSortState);\n\n  const goods: Good[] = prepareGoods(goodsFromServer, sortRules);\n  const showRevers = sortRules.field || sortRules.isReverse;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info', {\n            'is-light': sortRules.field !== SortType.Alphabetic,\n          })}\n          onClick={() => setSortRules({\n            field: SortType.Alphabetic,\n            isReverse: sortRules.isReverse,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success', {\n            'is-light': sortRules.field !== SortType.Length,\n          })}\n          onClick={() => setSortRules({\n            field: SortType.Length,\n            isReverse: sortRules.isReverse,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning', {\n            'is-light': !sortRules.isReverse,\n          })}\n          onClick={() => setSortRules({\n            field: sortRules.field,\n            isReverse: !sortRules.isReverse,\n          })}\n        >\n          Reverse\n        </button>\n\n        {showRevers && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => setSortRules(defaultSortState)}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}